// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gid_service.proto

package gidSrv // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqId struct {
	BizTag               string   `protobuf:"bytes,1,opt,name=BizTag,proto3" json:"BizTag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqId) Reset()         { *m = ReqId{} }
func (m *ReqId) String() string { return proto.CompactTextString(m) }
func (*ReqId) ProtoMessage()    {}
func (*ReqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_gid_service_4d8b77d65df61d37, []int{0}
}
func (m *ReqId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqId.Unmarshal(m, b)
}
func (m *ReqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqId.Marshal(b, m, deterministic)
}
func (dst *ReqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqId.Merge(dst, src)
}
func (m *ReqId) XXX_Size() int {
	return xxx_messageInfo_ReqId.Size(m)
}
func (m *ReqId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqId proto.InternalMessageInfo

func (m *ReqId) GetBizTag() string {
	if m != nil {
		return m.BizTag
	}
	return ""
}

type ResId struct {
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResId) Reset()         { *m = ResId{} }
func (m *ResId) String() string { return proto.CompactTextString(m) }
func (*ResId) ProtoMessage()    {}
func (*ResId) Descriptor() ([]byte, []int) {
	return fileDescriptor_gid_service_4d8b77d65df61d37, []int{1}
}
func (m *ResId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResId.Unmarshal(m, b)
}
func (m *ResId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResId.Marshal(b, m, deterministic)
}
func (dst *ResId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResId.Merge(dst, src)
}
func (m *ResId) XXX_Size() int {
	return xxx_messageInfo_ResId.Size(m)
}
func (m *ResId) XXX_DiscardUnknown() {
	xxx_messageInfo_ResId.DiscardUnknown(m)
}

var xxx_messageInfo_ResId proto.InternalMessageInfo

func (m *ResId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqId)(nil), "gidSrv.ReqId")
	proto.RegisterType((*ResId)(nil), "gidSrv.ResId")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GidClient is the client API for Gid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GidClient interface {
	GetId(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ResId, error)
}

type gidClient struct {
	cc *grpc.ClientConn
}

func NewGidClient(cc *grpc.ClientConn) GidClient {
	return &gidClient{cc}
}

func (c *gidClient) GetId(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ResId, error) {
	out := new(ResId)
	err := c.cc.Invoke(ctx, "/gidSrv.Gid/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GidServer is the server API for Gid service.
type GidServer interface {
	GetId(context.Context, *ReqId) (*ResId, error)
}

func RegisterGidServer(s *grpc.Server, srv GidServer) {
	s.RegisterService(&_Gid_serviceDesc, srv)
}

func _Gid_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidSrv.Gid/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).GetId(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gid_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidSrv.Gid",
	HandlerType: (*GidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _Gid_GetId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gid_service.proto",
}

func init() { proto.RegisterFile("gid_service.proto", fileDescriptor_gid_service_4d8b77d65df61d37) }

var fileDescriptor_gid_service_4d8b77d65df61d37 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xcf, 0x4c, 0x89,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b,
	0xcf, 0x4c, 0x09, 0x2e, 0x2a, 0x53, 0x92, 0xe7, 0x62, 0x0d, 0x4a, 0x2d, 0xf4, 0x4c, 0x11, 0x12,
	0xe3, 0x62, 0x73, 0xca, 0xac, 0x0a, 0x49, 0x4c, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82,
	0xf2, 0x94, 0xc4, 0x41, 0x0a, 0x8a, 0x3d, 0x53, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x98,
	0x14, 0x18, 0x35, 0x98, 0x83, 0x98, 0x32, 0x53, 0x8c, 0x74, 0xb8, 0x98, 0xdd, 0x33, 0x53, 0x84,
	0x54, 0xb9, 0x58, 0xdd, 0x53, 0x4b, 0x3c, 0x53, 0x84, 0x78, 0xf5, 0x20, 0x46, 0xea, 0x81, 0xcd,
	0x93, 0x42, 0xe2, 0x16, 0x7b, 0xa6, 0x38, 0x71, 0x45, 0x71, 0xe8, 0x59, 0x43, 0x44, 0x92, 0xd8,
	0xc0, 0x4e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x42, 0x70, 0x6d, 0x97, 0x00, 0x00,
	0x00,
}
