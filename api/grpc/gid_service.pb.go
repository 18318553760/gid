// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gid_service.proto

package gid

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("gid_service.proto", fileDescriptor_d4ee8efa2aab3996) }

var fileDescriptor_d4ee8efa2aab3996 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xcf, 0x4c, 0x89,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e,
	0xcf, 0x4c, 0x91, 0xe2, 0xc8, 0x4c, 0x81, 0x70, 0x8d, 0x6a, 0xb9, 0x98, 0xdd, 0x33, 0x53, 0x84,
	0x94, 0xb8, 0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0x78, 0xf4, 0xd2, 0x33, 0x53, 0xf4, 0x82, 0x52,
	0x0b, 0x41, 0x3c, 0x29, 0x18, 0xaf, 0x38, 0x20, 0x3f, 0x2f, 0x5d, 0x48, 0x9e, 0x8b, 0xd5, 0x3d,
	0xb5, 0xc4, 0x33, 0x45, 0x88, 0x0b, 0xa6, 0xc8, 0x33, 0x45, 0x0a, 0xc6, 0x2e, 0xf6, 0x4c, 0x11,
	0x32, 0xe4, 0xe2, 0x74, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x0d, 0x49, 0x4c, 0x17, 0x12, 0x84, 0x29,
	0x0a, 0x49, 0x4c, 0x87, 0x88, 0x4a, 0xc1, 0x84, 0x8a, 0xe1, 0x42, 0x49, 0x6c, 0x60, 0x57, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xb2, 0x69, 0x81, 0xa9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GidClient is the client API for Gid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GidClient interface {
	Ping(ctx context.Context, in *ReqPing, opts ...grpc.CallOption) (*ResPong, error)
	GetId(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ResId, error)
	CreateTag(ctx context.Context, in *ReqTagCreate, opts ...grpc.CallOption) (*ResTagCreate, error)
}

type gidClient struct {
	cc grpc.ClientConnInterface
}

func NewGidClient(cc grpc.ClientConnInterface) GidClient {
	return &gidClient{cc}
}

func (c *gidClient) Ping(ctx context.Context, in *ReqPing, opts ...grpc.CallOption) (*ResPong, error) {
	out := new(ResPong)
	err := c.cc.Invoke(ctx, "/gid.Gid/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gidClient) GetId(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*ResId, error) {
	out := new(ResId)
	err := c.cc.Invoke(ctx, "/gid.Gid/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gidClient) CreateTag(ctx context.Context, in *ReqTagCreate, opts ...grpc.CallOption) (*ResTagCreate, error) {
	out := new(ResTagCreate)
	err := c.cc.Invoke(ctx, "/gid.Gid/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GidServer is the server API for Gid service.
type GidServer interface {
	Ping(context.Context, *ReqPing) (*ResPong, error)
	GetId(context.Context, *ReqId) (*ResId, error)
	CreateTag(context.Context, *ReqTagCreate) (*ResTagCreate, error)
}

// UnimplementedGidServer can be embedded to have forward compatible implementations.
type UnimplementedGidServer struct {
}

func (*UnimplementedGidServer) Ping(ctx context.Context, req *ReqPing) (*ResPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGidServer) GetId(ctx context.Context, req *ReqId) (*ResId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (*UnimplementedGidServer) CreateTag(ctx context.Context, req *ReqTagCreate) (*ResTagCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}

func RegisterGidServer(s *grpc.Server, srv GidServer) {
	s.RegisterService(&_Gid_serviceDesc, srv)
}

func _Gid_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gid.Gid/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).Ping(ctx, req.(*ReqPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gid_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gid.Gid/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).GetId(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gid_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTagCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gid.Gid/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).CreateTag(ctx, req.(*ReqTagCreate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gid_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gid.Gid",
	HandlerType: (*GidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gid_Ping_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _Gid_GetId_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Gid_CreateTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gid_service.proto",
}
